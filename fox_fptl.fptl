Scheme FoxAlgorithm {
    N=[1]; fill_a=[2]; fill_b=[3]; show=[4];
    Nsqr=(N * N).mul; 
    
    @ = (
            "Matrix size = ".rawPrint * N.print *
            "; fill_a = ".rawPrint * fill_a.print *
            "; fill_b = ".rawPrint * fill_b.printLine
        ) * 
        ((show * 0).greater * (N * 10).lequal).and -> 
            ((zero * 0 * 0 * 0 * N * N * A * B).fox_mult * Nsqr * N).print_matr,
            ((zero * 0 * 0 * 0 * N * N * A * B).fox_mult * Nsqr * N);
       
    zero = (N * 0.0).fill_matr;
    A = (N * fill_a).t_ident_matr;
    B = (N * fill_b).t_ident_matr;
         
    // Multiplication  
    Fun fox_mult {
        result = [1];
        blockC = [2];
        blockA = [3];
        blockB = [4];
        bSize = [5];
        size = [6];
        A = [7];
        B = [8];

        bSize2 = (bSize * 2).div;
        
        c00 = blockC;
        c01 = (blockC * bSize2).add;           
        c10 = (blockC * (bSize2 * size).mul).add; 
        c11 = ((blockC * (bSize2 * size).mul).add * bSize2).add; 

        a00 = blockA;
        a01 = (blockA * bSize2).add;           
        a10 = (blockA * (bSize2 * size).mul).add; 
        a11 = ((blockA * (bSize2 * size).mul).add * bSize2).add; 

        b00 = blockB;
        b01 = (blockB * bSize2).add;           
        b10 = (blockB * (bSize2 * size).mul).add; 
        b11 = ((blockB * (bSize2 * size).mul).add * bSize2).add; 
        
        @ = (bSize * 2).equal->
            (result * blockC * blockA * blockB * bSize * size * A * B).execute,
            ((((((((result * c00 * a00 * b00 * bSize2 * size * A * B).fox_mult*
                            c00 * a01 * b01 * bSize2 * size * A * B).fox_mult*
                            c01 * a00 * b10 * bSize2 * size * A * B).fox_mult*
                            c01 * a01 * b11 * bSize2 * size * A * B).fox_mult* 
                            c10 * a10 * b00 * bSize2 * size * A * B).fox_mult* 
                            c10 * a11 * b01 * bSize2 * size * A * B).fox_mult* 
                            c11 * a10 * b10 * bSize2 * size * A * B).fox_mult* 
                            c11 * a11 * b11 * bSize2 * size * A * B
            ).fox_mult;
            

        Fun execute {
            result = [1];
            blockC = [2]; 
            blockA = [3]; 
            blockB = [4];
            bSize = [5];
            size = [6];
            A = [7]; 
            B = [8];
                
            C11 = (
                (((A*blockA).arrayGet)*((B*blockB).arrayGet)).mul*
                (((A*(blockA*1).add).arrayGet)*((B*(blockB*size).add).arrayGet)).mul
            ).add;

            C12 = (
                (((A*blockA).arrayGet)*((B*(blockB*1).add).arrayGet)).mul*
                (((A*(blockA*1).add).arrayGet)*((B*(((blockB*size).add)*1).add).arrayGet)).mul
            ).add;

            C21 = (
                (((A*(blockA*size).add).arrayGet)*((B*blockB).arrayGet)).mul*
                (((A*(((blockA*size).add)*1).add).arrayGet)*((B*(blockB*size).add).arrayGet)).mul
            ).add;

            C22 = (
                (((A*(blockA*size).add).arrayGet) * ((B*(blockB*1).add).arrayGet)).mul*
                (((A*(((blockA*size).add)*1).add).arrayGet) * ((B*(((blockB*size).add)*1).add).arrayGet)).mul
            ).add;

            @ = ((((result * blockC * C11).place*
                            (blockC*1).add * C12).place* 
                            (blockC*size).add * C21).place*
                            ((blockC*1).add*size).add * C22).place;
            
            Fun place {
                result = [1];
                index = [2];
                value = [3];
                @ = (result * index * ((result*index).arrayGet*value).add).arraySet;
            }
        }
    }

    // Fill matrix with values: [1] - size; [2] - fill value
    Fun fill_matr {
        @ = (([1] * [1]).mul * [2]).arrayCreate;
    }

    // Create matrix of size [1] with value [2] on main diagonal.
    Fun ident_matr {
        @ = (([1] * 0.0).fill_matr * 0 * [1] * [2]).diag;

        Fun diag{
            result = [1];
            row = [2];
            size = [3];
            value = [4]; 
            @ = (row * size).equal -> 
                [1],
                (([1] * ((size * row).mul * row).add * value).arraySet *
                 (row * 1).add * size * value).diag;
        }
    }

    // Create matrix of size [1] with value [2] on secondary diagonal.
    Fun t_ident_matr {
        @ = (([1] * 0.0).fill_matr * 0 * [1] * [2]).diag;

        Fun diag{
            result = [1];
            row = [2];
            size = [3];
            value = [4]; 
            @ = (row * size).equal -> 
                [1],
                (([1] * ((size * row).mul * ((size * row).sub * 1).sub).add * value).arraySet *
                 (row * 1).add * size * value).diag;
        }
    }


    // Print matrix: [1] - matrix; [2] - size^2; [3] - rows count 
	Fun print_matr {
		N = ([2] * 1).sub;		
		@ = (N * 0).gequal -> 
                (((N * [3]).mod * 0).equal ->
                    ([1] * N).arrayGet.printLine * ([1] * N * [3]).print_matr, 
                    ([1] * N).arrayGet.print * "\t".rawPrint * ([1] * N * [3]).print_matr
                ),
            [1];
	}
}
Application
% FoxAlgorithm(4, 2.0, 5.0, 1)